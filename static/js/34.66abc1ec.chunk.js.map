{"version":3,"sources":["pages/auth/login/Login.js","auth/utils.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","message","className","Login","useSkin","skin","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","useState","username","setUsername","password","setPassword","useForm","register","errors","handleSubmit","illustration","source","require","default","Row","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","Col","lg","sm","src","alt","md","CardTitle","tag","CardText","Form","onSubmit","isObjEmpty","useJwt","login","then","res","data","status","response","user","token","refreshToken","handleLogin","update","push","role","name","toast","error","transition","Slide","hideProgressBar","autoClose","catch","err","FormGroup","Label","for","Input","autoFocus","type","value","placeholder","onChange","target","classnames","innerRef","required","validate","CustomInput","label","Button","Ripple","color","block","InputPasswordToggle","props","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","addonType","size","renderIcon","defaultProps"],"mappings":"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","file":"static/js/34.66abc1ec.chunk.js","sourcesContent":["import { useState, useContext, Fragment } from 'react'\r\nimport classnames from 'classnames'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Row, Col, CardTitle, CardText, Form, Input, FormGroup, Label, CustomInput, Button } from 'reactstrap'\r\nimport '@styles/base/pages/page-auth.scss'\r\nimport {useSkin} from \"../../../utility/hooks/useSkin\"\r\nimport {AbilityContext} from \"../../../utility/context/Can\"\r\nimport {isObjEmpty} from \"../../../utility/Utils\"\r\nimport useJwt from \"../../../auth/jwt/useJwt\"\r\nimport {handleLogin} from \"../../../redux/actions/auth\"\r\nimport {getHomeRouteForLoggedInUser} from \"../../../auth/utils\"\r\nimport InputPasswordToggle from \"../../../@core/components/input-password-toggle\"\r\n\r\nconst ToastContent = ({ message }) => (\r\n    <Fragment>\r\n      <div className='toastify-header'>\r\n        <div className='title-wrapper'>\r\n          <h6 className='toast-title font-weight-bold'>Thông báo</h6>\r\n        </div>\r\n      </div>\r\n      <div className='toastify-body'>\r\n        <span>{message}</span>\r\n      </div>\r\n    </Fragment>\r\n)\r\n\r\nconst Login = () => {\r\n  const [skin] = useSkin()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const { register, errors, handleSubmit } = useForm()\r\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n      source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n  const onSubmit = () => {\r\n    if (isObjEmpty(errors)) {\r\n      useJwt\r\n          .login({ username, password })\r\n          .then(res => {\r\n            if (res.data && res.data.status) {\r\n              const response = res.data.data\r\n              const user = response.user\r\n              user.ability = response.ability\r\n              const data = { user, token: response.token, refreshToken: response.refreshToken }\r\n              dispatch(handleLogin(response))\r\n              ability.update(response.ability)\r\n              history.push(getHomeRouteForLoggedInUser(response.role.name))\r\n            } else {\r\n              toast.error(<ToastContent message={'Tài khoản hoặc mật khẩu không chính xác, vui lòng kiểm tra lại'}/>,\r\n                  { transition: Slide, hideProgressBar: true, autoClose: 2000 })\r\n            }\r\n          })\r\n          .catch(err => {\r\n            toast.error(<ToastContent message={'Tài khoản hoặc mật khẩu không chính xác, vui lòng kiểm tra lại'}/>,\r\n                { transition: Slide, hideProgressBar: true, autoClose: 2000 })\r\n          })\r\n    }\r\n  }\r\n\r\n  return (\r\n      <div className='auth-wrapper auth-v2'>\r\n        <Row className='auth-inner m-0'>\r\n          <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n            <svg viewBox='0 0 139 95' version='1.1' height='28'>\r\n              <defs>\r\n                <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\r\n                  <stop stopColor='#000000' offset='0%'/>\r\n                  <stop stopColor='#FFFFFF' offset='100%'/>\r\n                </linearGradient>\r\n                <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\r\n                  <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'/>\r\n                  <stop stopColor='#FFFFFF' offset='100%'/>\r\n                </linearGradient>\r\n              </defs>\r\n              <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\r\n                <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\r\n                  <g id='Group' transform='translate(400.000000, 178.000000)'>\r\n                    <path\r\n                        d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\r\n                        id='Path'\r\n                        className='text-primary'\r\n                        style={{ fill: 'currentColor' }}\r\n                    />\r\n                    <path\r\n                        d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\r\n                        id='Path'\r\n                        fill='url(#linearGradient-1)'\r\n                        opacity='0.2'\r\n                    />\r\n                    <polygon\r\n                        id='Path-2'\r\n                        fill='#000000'\r\n                        opacity='0.049999997'\r\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\r\n                    />\r\n                    <polygon\r\n                        id='Path-2'\r\n                        fill='#000000'\r\n                        opacity='0.099999994'\r\n                        points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\r\n                    />\r\n                    <polygon\r\n                        id='Path-3'\r\n                        fill='url(#linearGradient-2)'\r\n                        opacity='0.099999994'\r\n                        points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\r\n                    />\r\n                  </g>\r\n                </g>\r\n              </g>\r\n            </svg>\r\n            <h2 className='brand-text text-primary ml-1'>Vuexy</h2>\r\n          </Link>\r\n          <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n            <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n              <img className='img-fluid' src={source} alt='Login V2' />\r\n            </div>\r\n          </Col>\r\n          <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n            <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n              <CardTitle tag='h2' className='font-weight-bold mb-1'>\r\n                Chào mừng bạn đến với FEAER ADMIN! 👋\r\n              </CardTitle>\r\n              <CardText className='mb-2'>Hệ thống quản lý và chăm sóc khách hàng FEAER</CardText>\r\n              {/*<Alert color='primary'>*/}\r\n              {/*  <div className='alert-body font-small-2'>*/}\r\n              {/*    <p>*/}\r\n              {/*      <small className='mr-50'>*/}\r\n              {/*        <span className='font-weight-bold'>Admin:</span> admin@demo.com | admin*/}\r\n              {/*      </small>*/}\r\n              {/*    </p>*/}\r\n              {/*    <p>*/}\r\n              {/*      <small className='mr-50'>*/}\r\n              {/*        <span className='font-weight-bold'>Client:</span> client@demo.com | client*/}\r\n              {/*      </small>*/}\r\n              {/*    </p>*/}\r\n              {/*  </div>*/}\r\n              {/*  <HelpCircle*/}\r\n              {/*      id='login-tip'*/}\r\n              {/*      className='position-absolute'*/}\r\n              {/*      size={18}*/}\r\n              {/*      style={{ top: '10px', right: '10px' }}*/}\r\n              {/*  />*/}\r\n              {/*  <UncontrolledTooltip target='login-tip' placement='left'>*/}\r\n              {/*    This is just for ACL demo purpose.*/}\r\n              {/*  </UncontrolledTooltip>*/}\r\n              {/*</Alert>*/}\r\n              <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                  <Label className='form-label' for='login-email'>\r\n                    Tài khoản\r\n                  </Label>\r\n                  <Input\r\n                      autoFocus\r\n                      type='email'\r\n                      value={username}\r\n                      id='login-email'\r\n                      name='login-email'\r\n                      placeholder='abc@feaer.vn'\r\n                      onChange={e => setUsername(e.target.value)}\r\n                      className={classnames({ 'is-invalid': errors['login-email'] })}\r\n                      innerRef={register({ required: true, validate: value => value !== '' })}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <div className='d-flex justify-content-between'>\r\n                    <Label className='form-label' for='login-password'>\r\n                      Mật khẩu\r\n                    </Label>\r\n                    <Link to='/forgot-password'>\r\n                      <small>Quên mật khẩu?</small>\r\n                    </Link>\r\n                  </div>\r\n                  <InputPasswordToggle\r\n                      value={password}\r\n                      id='login-password'\r\n                      name='login-password'\r\n                      className='input-group-merge'\r\n                      onChange={e => setPassword(e.target.value)}\r\n                      className={classnames({ 'is-invalid': errors['login-password'] })}\r\n                      innerRef={register({ required: true, validate: value => value !== '' })}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Nhớ mật khẩu' />\r\n                </FormGroup>\r\n                <Button.Ripple type='submit' color='primary' block>\r\n                  Đăng Nhập\r\n                </Button.Ripple>\r\n              </Form>\r\n              {/*<p className='text-center mt-2'>*/}\r\n              {/*  <span className='mr-25'>New on our platform?</span>*/}\r\n              {/*  <Link to='/register'>*/}\r\n              {/*    <span>Create an account</span>*/}\r\n              {/*  </Link>*/}\r\n              {/*</p>*/}\r\n              {/*<div className='divider my-2'>*/}\r\n              {/*  <div className='divider-text'>or</div>*/}\r\n              {/*</div>*/}\r\n              {/*<div className='auth-footer-btn d-flex justify-content-center'>*/}\r\n              {/*  <Button.Ripple color='facebook'>*/}\r\n              {/*    <Facebook size={14} />*/}\r\n              {/*  </Button.Ripple>*/}\r\n              {/*  <Button.Ripple color='twitter'>*/}\r\n              {/*    <Twitter size={14} />*/}\r\n              {/*  </Button.Ripple>*/}\r\n              {/*  <Button.Ripple color='google'>*/}\r\n              {/*    <Mail size={14} />*/}\r\n              {/*  </Button.Ripple>*/}\r\n              {/*  <Button.Ripple className='mr-0' color='github'>*/}\r\n              {/*    <GitHub size={14} />*/}\r\n              {/*  </Button.Ripple>*/}\r\n              {/*</div>*/}\r\n            </Col>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","/**\r\n * Return if user is logged in\r\n * This is completely up to you and how you want to store the token in your frontend application\r\n * e.g. If you are using cookies to store the application please update this function\r\n */\r\nimport useJwt from \"../@core/auth/jwt/useJwt\"\r\n\r\n// eslint-disable-next-line arrow-body-style\r\nexport const isUserLoggedIn = () => {\r\n  return localStorage.getItem('userData') && localStorage.getItem(useJwt.jwtConfig.storageTokenKeyName)\r\n}\r\n\r\nexport const getUserData = () => JSON.parse(localStorage.getItem('userData'))\r\n\r\n/**\r\n * This function is used for demo purpose route navigation\r\n * In real app you won't need this function because your app will navigate to same route for each users regardless of ability\r\n * Please note role field is just for showing purpose it's not used by anything in frontend\r\n * We are checking role just for ease\r\n * NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\r\n * @param {String} userRole Role of user\r\n */\r\nexport const getHomeRouteForLoggedInUser = userRole => {\r\n  if (userRole === null) return '/'\r\n  return { name: 'auth-login' }\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}